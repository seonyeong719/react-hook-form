React Hook Form 이란?

    - React에서 form의 validation을 빠르고 쉬벡 도와주는 라이브러리.
      전체의 폼이 리랜더링 되지 않으면서 각각의 입력값 변화를 관찰할 수 있어서 성능도 빠르다.



설치
    - npm i react-hook-form


------------------------------------------------


기능

    * useForm()
     - 필드 등록

        ex)  const { register, handleSubmit, watch, formState: {errors} } = useForm();
        
        - useForm() 이라는 hook을 import한다. useForm은 객체로 구성되어 있는데,
          여러가지 기능(메소드)들이 들어간 객체이다. 이 객체에서 필요한 기능들을 꺼내 쓰는 방식이다.


            * register() 
             - 유효성 검사 함수!!!

                ex) <input defaultValue="test" {...register("example")} />

                - input 태그의 value 프로퍼티가 defaultValue로 사용이 된다. 
                  hook form 을 사용하려면 태그의 안쪽에 {...register}를 넣어주면 된다.
                  
                  괄호 안에 들어간 example은 ?
                  -> 데이터가 아니라 해당 입력폼의 이름이다!!
                     *** 이 이름은 맨 마지막에 onSubmit 데이터가 콘솔에 출력될 때의 키값이 된다!!***
                


            * handleSubmit()

                ex) <form onSubmit={handleSubmit(onSubmit)}>

                - form 태그에 useForm에서 가져온 handleSubmit 함수를 걸어준다는 의미이다.
                  
                ** 주의 할 점**
                    form에 쓰인 onSubmit 메소드와 앞서 변수로 만든 데이터인 onSubmit을 헷갈리지 않아야 한다. 




            * watch( 감시할 input 의 이름 ) 

                ex) console.log(watch("example"));

                - 실시간으로 데이터 입력값을 감시한다. 괄호안에는 감시할 input의 이름을 넣으면 된다. 
                input에 어떤 데이터가 들어가는지, 실시간으로 콘솔로 출력해준다. 



            * formState: {errors} 
                
                - 에러 코드를 출력하기 위한 객체이다. 

            
------------------------------------------------


    * onSubmit

        ex)  const onSubmit = data => console.log(data);

        - data라는 매개변수를 받아 콘솔로 출력한다. => 입력한 데이터들을 확인하기 위한 용도이다. 


------------------------------------------------


    * { required }

        ex) <input {...register("example", { required: true })} />

        - register 뒤에 required 라는 객체는 ??
          해당 태그의 값이 필수값이어야 하는지 정해주는 객체이다.

          required 프로퍼티는 옵션으로 정할 수 있다!!
          그래서 우리는 무조건 input 태그에 required 속성을 부여할 필요가 없다!!


------------------------------------------------


    * error handling

        ex) {errors.example && <span>This field is required</span>}

        - 이부분은 에러가 생길 시 어떤 결과가 나오는지 알려주는 부분이다. 
          formState : {errors} 에서 errors는 다양한 에러 프로퍼티들을 가지고 있다. 

          errors의 example 키값이 true 라면 This field is required 
          즉, 필수갑을 입력하지 않았다는 오류 메세지가 뜬다 
    

=================================================================================


사용자가 버튼을 누르기 전에 form에 입력한 값이 유효한 값이 아니라는 것을 미리 표시해주는 것이 좀 더 나은 UX를 제공한다. 
이를 가능하게 해주는 것이 mode이다!!

mode는 useForm()에 넘겨줄 수 있는 다양한 optional arguments 중 하나로 사용자가 form을 submit 하기 전에 validation이 실행될 수 있게 해준다.

// mode에 사용 가능한 값
mode: onChange | onBlur | onSubmit | onTouched | all = 'onSubmit'

onBlur 이벤트 발생할 때 validation 발생시키기

register : input 요소를 React hook form과 연결해 검증 규칙을 적용할 수
 있게 하는 메소드

handleSubmit : form을 submit했을 때 실행할 함수.

formState : form state에 관한 정보를 담고 있는 객체

errors : input 값들의 에러 정보를 가지고 있는 객체

getValues : input 값을 가져올 수 있는 함수

그리고 useForm({ mode: "onChange" }) mode라는 것도 있는데

mode를 설정함으로써 해당 모드의 register 안 검증 로직이 동작하는 규칙을 정할 수 있습니다.

onChange : input 값이 바뀔 때마다 검증 로직이 동작합니다.

onBlur : 포커스 상태를 잃어 버릴떄 동작합니다.

onSubmit : 제출 함수가 실행될 때 동작합니다.

onTouched : 첫 번째 blur 이벤트에서 동작합니다. 그 후에는 모든 change 이벤트에서
 동작합니다.

all : blur 및 change 이벤트에서 동작합니다.

 ‘아! isDirty는 어떤 필드든 사용자 입력이 있었는지 확인할 때 쓰면 되겠고, dirtyFields는 어떤 필드에 사용자 입력이 있었는지 콕 집어서 알아야 할 때 사용하면 되겠구나!’

 